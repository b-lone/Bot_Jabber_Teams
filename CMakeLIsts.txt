cmake_minimum_required(VERSION 3.14)

project(Bot)

set(PROJECT_ROOT_PATH "${CMAKE_SOURCE_DIR}")
set(PROJECT_OUTPUT_PARH "${PROJECT_ROOT_PATH}/bin")
set(PROJECT_SRC_PATH "${PROJECT_ROOT_PATH}/src")
set(PROJECT_LIB_PATH "${PROJECT_ROOT_PATH}/lib")
if(CMAKE_BUILD_TYPE MATCHES "Debug")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_ROOT_PATH}/bin/Debug")
elseif(CMAKE_BUILD_TYPE MATCHES "Release")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_ROOT_PATH}/bin/Release")
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

find_package(Qt5 COMPONENTS Widgets Network REQUIRED)
find_package(OpenSSL REQUIRED)
message("openssl:${OPENSSL_FOUND}")


#include(${PROJECT_LIB_PATH}/lib.cmake)
include(${PROJECT_SRC_PATH}/src.cmake)

#add_library(BotObject STATIC ${OBJ_SRC} ${OBJ_HEAD})
#target_link_libraries(BotObject Qt5::Core)
#install(TARGETS BotObject LIBRARY DESTINATION ${PROJECT_ROOT_PATH}/lib)
#install(FILES ${OBJ_HEAD} DESTINATION ${PROJECT_ROOT_PATH}/lib/include)
#include_directories(lib/include)

add_executable(${PROJECT_NAME} ${SRC_FILES} ${HEAD_FILES} ${RESOURCES_FILES} ${UI_FILES})

include_directories(${OPENSSL_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME}
Qt5::Widgets
Qt5::Network
OpenSSL::SSL
OpenSSL::Crypto
)

file(COPY "${PROJECT_ROOT_PATH}/config" DESTINATION "${PROJECT_OUTPUT_PARH}/Debug")
file(COPY "${PROJECT_ROOT_PATH}/config" DESTINATION "${PROJECT_OUTPUT_PARH}/Release")
file(COPY "${PROJECT_ROOT_PATH}/config" DESTINATION "${PROJECT_OUTPUT_PARH}/Wrap")
file(COPY "${PROJECT_ROOT_PATH}/ngrok" DESTINATION "${PROJECT_OUTPUT_PARH}/Debug")
file(COPY "${PROJECT_ROOT_PATH}/ngrok" DESTINATION "${PROJECT_OUTPUT_PARH}/Release")
file(COPY "${PROJECT_ROOT_PATH}/ngrok" DESTINATION "${PROJECT_OUTPUT_PARH}/Wrap")
file(COPY "${PROJECT_ROOT_PATH}/picture" DESTINATION "${PROJECT_OUTPUT_PARH}/Debug")
file(COPY "${PROJECT_ROOT_PATH}/picture" DESTINATION "${PROJECT_OUTPUT_PARH}/Release")
file(COPY "${PROJECT_ROOT_PATH}/picture" DESTINATION "${PROJECT_OUTPUT_PARH}/Wrap")
install(TARGETS ${PROJECT_NAME} BUNDLE DESTINATION "${PROJECT_OUTPUT_PARH}/Wrap")
